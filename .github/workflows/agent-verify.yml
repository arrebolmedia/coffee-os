name: Agent Verify - CI Pipeline

on:
  push:
    branches: [main, develop, 'feat/**', 'fix/**']
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint-and-format:
    name: üîç Lint & Format Check
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Format check (Prettier)
        run: npm run format:check
      
      - name: Lint (ESLint)
        run: npm run lint

  type-check:
    name: üìù Type Check
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Type check
        run: npm run type-check

  unit-tests:
    name: üß™ Unit Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres123
          POSTGRES_DB: coffeeos_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run database migrations
        run: npm run db:generate
        env:
          DATABASE_URL: postgresql://postgres:postgres123@localhost:5432/coffeeos_test
      
      - name: Run unit tests with coverage
        run: npm run test:coverage
        env:
          DATABASE_URL: postgresql://postgres:postgres123@localhost:5432/coffeeos_test
          REDIS_URL: redis://localhost:6379
      
      - name: Check coverage threshold (‚â•90%)
        run: |
          echo "Checking coverage threshold..."
          # This will fail if coverage is below 90%
          # Configure in jest.config.js: coverageThreshold.global = 90
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  e2e-tests:
    name: üé≠ E2E Tests
    runs-on: ${{ matrix.os }}
    timeout-minutes: 20
    
    strategy:
      matrix:
        os: [ubuntu-latest]
        browser: [chromium, firefox, webkit]
    
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres123
          POSTGRES_DB: coffeeos_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Install Playwright browsers
        run: npx playwright install --with-deps ${{ matrix.browser }}
      
      - name: Run database migrations
        run: npm run db:generate
        env:
          DATABASE_URL: postgresql://postgres:postgres123@localhost:5432/coffeeos_test
      
      - name: Build applications
        run: npm run build
        env:
          DATABASE_URL: postgresql://postgres:postgres123@localhost:5432/coffeeos_test
          REDIS_URL: redis://localhost:6379
      
      - name: Run E2E tests
        run: npm run test:e2e -- --project=${{ matrix.browser }}
        env:
          DATABASE_URL: postgresql://postgres:postgres123@localhost:5432/coffeeos_test
          REDIS_URL: redis://localhost:6379
      
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report-${{ matrix.os }}-${{ matrix.browser }}
          path: playwright-report/
          retention-days: 7

  security-scan:
    name: üîí Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      # Semgrep SAST
      - name: Run Semgrep
        uses: semgrep/semgrep-action@v1
        with:
          config: .semgrep.yml
          generateSarif: true
        env:
          SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}
      
      # Gitleaks secret scanning
      - name: Run Gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_CONFIG: .gitleaks.toml
      
      # npm audit
      - name: Run npm audit
        run: npm audit --audit-level=critical
        continue-on-error: true
      
      # Upload SARIF to GitHub Security
      - name: Upload SARIF file
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: semgrep.sarif

  build-verify:
    name: üèóÔ∏è Build Verification
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build all packages
        run: npm run build
        env:
          DATABASE_URL: postgresql://postgres:postgres123@localhost:5432/coffeeos
          REDIS_URL: redis://localhost:6379
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            apps/*/dist
            apps/*/.next
            packages/*/dist
          retention-days: 7

  quality-gate:
    name: ‚úÖ Quality Gate
    runs-on: ubuntu-latest
    needs: [lint-and-format, type-check, unit-tests, e2e-tests, security-scan, build-verify]
    if: always()
    
    steps:
      - name: Check all jobs status
        run: |
          if [[ "${{ needs.lint-and-format.result }}" != "success" ]] || \
             [[ "${{ needs.type-check.result }}" != "success" ]] || \
             [[ "${{ needs.unit-tests.result }}" != "success" ]] || \
             [[ "${{ needs.e2e-tests.result }}" != "success" ]] || \
             [[ "${{ needs.security-scan.result }}" != "success" ]] || \
             [[ "${{ needs.build-verify.result }}" != "success" ]]; then
            echo "‚ùå Quality gate FAILED"
            echo "One or more jobs did not succeed"
            exit 1
          else
            echo "‚úÖ Quality gate PASSED"
            echo "All checks successful!"
          fi
      
      - name: Post status comment
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const status = '${{ job.status }}' === 'success' ? '‚úÖ PASSED' : '‚ùå FAILED';
            const body = `## Quality Gate ${status}\n\n` +
              `**Lint & Format:** ${{ needs.lint-and-format.result }}\n` +
              `**Type Check:** ${{ needs.type-check.result }}\n` +
              `**Unit Tests:** ${{ needs.unit-tests.result }}\n` +
              `**E2E Tests:** ${{ needs.e2e-tests.result }}\n` +
              `**Security Scan:** ${{ needs.security-scan.result }}\n` +
              `**Build:** ${{ needs.build-verify.result }}\n`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });
